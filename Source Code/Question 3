from keras.models import Sequential
from keras import layers
from keras.preprocessing.text import Tokenizer
import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from keras.layers.embeddings import Embedding
from keras.preprocessing.sequence import pad_sequences
from sklearn.datasets import fetch_20newsgroups
import matplotlib.pyplot as plt

dataset = fetch_20newsgroups(subset='train', shuffle=True)  # Loading the 20_newsgroup dataset that we worked on in the previous classes.
sentences = dataset.data

# Calculating the maximum words in a sentence.
maxWords = max([len(s.split()) for s in sentences])
y = dataset.target

# Tokenizing the data.
tokenizer = Tokenizer(maxWords)
tokenizer.fit_on_texts(sentences)

# Getting the vocabulary of data.
sentences = tokenizer.texts_to_matrix(sentences)
vocabSize = len(tokenizer.word_index) + 1
finalSentences = pad_sequences(sentences, maxlen=maxWords)

labelEncoder = preprocessing.LabelEncoder()
y = labelEncoder.fit_transform(y)

# Splitting data into testing and training sets.
X_train, X_test, y_train, y_test = train_test_split(finalSentences, y, test_size=0.25, random_state=1000)

# Defining the model.
model = Sequential()
model.add(Embedding(vocabSize, 32, input_length=maxWords))
model.add(layers.Flatten())
model.add(layers.Dense(300, activation='relu'))
model.add(layers.Dense(20, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['acc'])
history = model.fit(X_train, y_train, epochs=5, verbose=True, validation_data=(X_test, y_test), batch_size=256)

# Plotting accuracy.
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title("Model Accuracy")
plt.ylabel("Accuracy")
plt.xlabel('No.of epochs')
plt.legend(['Training', 'Validation'])
plt.show()

# Plotting loss.
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title("Model Loss")
plt.ylabel("Loss value")
plt.xlabel("No.of epochs")
plt.legend(["Training", "Validation"])
plt.show()

# Predicting the value for test sample.
pred = model.predict_classes(X_test[[10],:])
print("Model Prediction: ",pred)
print("Actual Value: ",y_test[10])
